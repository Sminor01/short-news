"""Add enum types

Revision ID: 28c9c8f54d42
Revises: 
Create Date: 2025-10-07 11:20:26.621381

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '28c9c8f54d42'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('companies', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('companies', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('companies_name_key'), 'companies', type_='unique')
    op.drop_index(op.f('idx_companies_name'), table_name='companies')
    op.create_index(op.f('ix_companies_name'), 'companies', ['name'], unique=True)
    op.alter_column('news_items', 'source_type',
               existing_type=postgresql.ENUM('blog', 'twitter', 'github', 'reddit', 'news_site', 'press_release', name='source_type'),
               type_=sa.Enum('BLOG', 'TWITTER', 'GITHUB', 'REDDIT', 'NEWS_SITE', 'PRESS_RELEASE', name='sourcetype'),
               existing_nullable=False)
    op.alter_column('news_items', 'category',
               existing_type=postgresql.ENUM('product_update', 'pricing_change', 'strategic_announcement', 'technical_update', 'funding_news', 'research_paper', 'community_event', name='news_category'),
               type_=sa.Enum('PRODUCT_UPDATE', 'PRICING_CHANGE', 'STRATEGIC_ANNOUNCEMENT', 'TECHNICAL_UPDATE', 'FUNDING_NEWS', 'RESEARCH_PAPER', 'COMMUNITY_EVENT', name='newscategory'),
               existing_nullable=True)
    op.alter_column('news_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('news_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_news_category'), table_name='news_items')
    op.drop_index(op.f('idx_news_company'), table_name='news_items')
    op.drop_index(op.f('idx_news_published'), table_name='news_items')
    op.drop_index(op.f('idx_news_search'), table_name='news_items', postgresql_using='gin')
    op.add_column('news_keywords', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('news_keywords', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('news_keywords', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_index(op.f('idx_keywords'), table_name='news_keywords')
    op.add_column('scraper_state', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('scraper_state', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('scraper_state', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('user_activity', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('user_activity', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_activity', 'news_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_activity', 'action',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('VIEWED', 'FAVORITED', 'MARKED_READ', 'SHARED', name='activitytype'),
               nullable=False)
    op.alter_column('user_activity', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_user_activity_news'), table_name='user_activity')
    op.drop_index(op.f('idx_user_activity_user'), table_name='user_activity')
    op.drop_constraint(op.f('unique_user_news_action'), 'user_activity', type_='unique')
    op.alter_column('user_preferences', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_preferences', 'interested_categories',
               existing_type=postgresql.ARRAY(postgresql.ENUM('product_update', 'pricing_change', 'strategic_announcement', 'technical_update', 'funding_news', 'research_paper', 'community_event', name='news_category')),
               type_=postgresql.ARRAY(sa.Enum('PRODUCT_UPDATE', 'PRICING_CHANGE', 'STRATEGIC_ANNOUNCEMENT', 'TECHNICAL_UPDATE', 'FUNDING_NEWS', 'RESEARCH_PAPER', 'COMMUNITY_EVENT', name='newscategory')),
               existing_nullable=True)
    op.alter_column('user_preferences', 'keywords',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('user_preferences', 'notification_frequency',
               existing_type=postgresql.ENUM('realtime', 'daily', 'weekly', 'never', name='notification_frequency'),
               type_=sa.Enum('REALTIME', 'DAILY', 'WEEKLY', 'NEVER', name='notificationfrequency'),
               existing_nullable=True,
               existing_server_default=sa.text("'daily'::notification_frequency"))
    op.alter_column('user_preferences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_preferences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('unique_user_pref'), 'user_preferences', type_='unique')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_unique_constraint(op.f('unique_user_pref'), 'user_preferences', ['user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_preferences', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_preferences', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_preferences', 'notification_frequency',
               existing_type=sa.Enum('REALTIME', 'DAILY', 'WEEKLY', 'NEVER', name='notificationfrequency'),
               type_=postgresql.ENUM('realtime', 'daily', 'weekly', 'never', name='notification_frequency'),
               existing_nullable=True,
               existing_server_default=sa.text("'daily'::notification_frequency"))
    op.alter_column('user_preferences', 'keywords',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('user_preferences', 'interested_categories',
               existing_type=postgresql.ARRAY(sa.Enum('PRODUCT_UPDATE', 'PRICING_CHANGE', 'STRATEGIC_ANNOUNCEMENT', 'TECHNICAL_UPDATE', 'FUNDING_NEWS', 'RESEARCH_PAPER', 'COMMUNITY_EVENT', name='newscategory')),
               type_=postgresql.ARRAY(postgresql.ENUM('product_update', 'pricing_change', 'strategic_announcement', 'technical_update', 'funding_news', 'research_paper', 'community_event', name='news_category')),
               existing_nullable=True)
    op.alter_column('user_preferences', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_unique_constraint(op.f('unique_user_news_action'), 'user_activity', ['user_id', 'news_id', 'action'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_activity_user'), 'user_activity', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_activity_news'), 'user_activity', ['news_id'], unique=False)
    op.alter_column('user_activity', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_activity', 'action',
               existing_type=sa.Enum('VIEWED', 'FAVORITED', 'MARKED_READ', 'SHARED', name='activitytype'),
               type_=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('user_activity', 'news_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('user_activity', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('user_activity', 'updated_at')
    op.alter_column('scraper_state', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('scraper_state', 'created_at')
    op.drop_column('scraper_state', 'id')
    op.create_index(op.f('idx_keywords'), 'news_keywords', ['keyword'], unique=False)
    op.drop_column('news_keywords', 'updated_at')
    op.drop_column('news_keywords', 'created_at')
    op.drop_column('news_keywords', 'id')
    op.create_index(op.f('idx_news_search'), 'news_items', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_news_published'), 'news_items', [sa.literal_column('published_at DESC')], unique=False)
    op.create_index(op.f('idx_news_company'), 'news_items', ['company_id'], unique=False)
    op.create_index(op.f('idx_news_category'), 'news_items', ['category'], unique=False)
    op.alter_column('news_items', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('news_items', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('news_items', 'category',
               existing_type=sa.Enum('PRODUCT_UPDATE', 'PRICING_CHANGE', 'STRATEGIC_ANNOUNCEMENT', 'TECHNICAL_UPDATE', 'FUNDING_NEWS', 'RESEARCH_PAPER', 'COMMUNITY_EVENT', name='newscategory'),
               type_=postgresql.ENUM('product_update', 'pricing_change', 'strategic_announcement', 'technical_update', 'funding_news', 'research_paper', 'community_event', name='news_category'),
               existing_nullable=True)
    op.alter_column('news_items', 'source_type',
               existing_type=sa.Enum('BLOG', 'TWITTER', 'GITHUB', 'REDDIT', 'NEWS_SITE', 'PRESS_RELEASE', name='sourcetype'),
               type_=postgresql.ENUM('blog', 'twitter', 'github', 'reddit', 'news_site', 'press_release', name='source_type'),
               existing_nullable=False)
    op.drop_index(op.f('ix_companies_name'), table_name='companies')
    op.create_index(op.f('idx_companies_name'), 'companies', ['name'], unique=False)
    op.create_unique_constraint(op.f('companies_name_key'), 'companies', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('companies', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('companies', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###
