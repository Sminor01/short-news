"""
Telegram bot service
"""

from typing import Dict, Any, Optional
from loguru import logger
import aiohttp
from app.core.config import settings


class TelegramService:
    """Service for Telegram bot interactions"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN if hasattr(settings, 'TELEGRAM_BOT_TOKEN') else None
        self.channel_id = settings.TELEGRAM_CHANNEL_ID if hasattr(settings, 'TELEGRAM_CHANNEL_ID') else None
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}" if self.bot_token else None
    
    async def send_digest(self, chat_id: str, digest_text: str) -> bool:
        """
        Send digest to a specific chat
        
        Args:
            chat_id: Telegram chat ID
            digest_text: Formatted digest text
            
        Returns:
            True if successful, False otherwise
        """
        if not self.bot_token:
            logger.warning("Telegram bot token not configured")
            return False
        
        try:
            url = f"{self.base_url}/sendMessage"
            
            # Split message if too long (Telegram limit is 4096 characters)
            messages = self._split_message(digest_text)
            
            for message in messages:
                payload = {
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": "Markdown",
                    "disable_web_page_preview": True
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=payload) as response:
                        if response.status != 200:
                            logger.error(f"Failed to send Telegram message: {response.status}")
                            return False
                        
                        result = await response.json()
                        if not result.get("ok"):
                            logger.error(f"Telegram API error: {result}")
                            return False
            
            logger.info(f"Digest sent to chat {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending Telegram message: {e}")
            return False
    
    async def send_to_channel(self, digest_text: str) -> bool:
        """
        Send digest to the public channel
        
        Args:
            digest_text: Formatted digest text
            
        Returns:
            True if successful, False otherwise
        """
        if not self.channel_id:
            logger.warning("Telegram channel ID not configured")
            return False
        
        return await self.send_digest(self.channel_id, digest_text)
    
    async def send_notification(self, chat_id: str, title: str, message: str) -> bool:
        """
        Send a notification message
        
        Args:
            chat_id: Telegram chat ID
            title: Notification title
            message: Notification message
            
        Returns:
            True if successful, False otherwise
        """
        notification_text = f"üîî **{title}**\n\n{message}"
        return await self.send_digest(chat_id, notification_text)
    
    def _split_message(self, text: str, max_length: int = 4000) -> list[str]:
        """
        Split message into chunks if it's too long
        
        Args:
            text: Message text
            max_length: Maximum length per message
            
        Returns:
            List of message chunks
        """
        if len(text) <= max_length:
            return [text]
        
        messages = []
        lines = text.split('\n')
        current_message = ""
        
        for line in lines:
            if len(current_message) + len(line) + 1 <= max_length:
                current_message += line + "\n"
            else:
                if current_message:
                    messages.append(current_message.strip())
                current_message = line + "\n"
        
        if current_message:
            messages.append(current_message.strip())
        
        return messages
    
    async def register_user(self, telegram_user_id: int, telegram_username: Optional[str] = None) -> str:
        """
        Generate registration link for user
        
        Args:
            telegram_user_id: Telegram user ID
            telegram_username: Telegram username
            
        Returns:
            Chat ID as string
        """
        return str(telegram_user_id)
    
    async def handle_command(self, command: str, chat_id: str, args: list[str] = None) -> str:
        """
        Handle bot commands
        
        Args:
            command: Command name (without /)
            chat_id: Chat ID
            args: Command arguments
            
        Returns:
            Response message
        """
        if command == "start":
            return self._handle_start_command(chat_id)
        elif command == "help":
            return self._handle_help_command()
        elif command == "subscribe":
            return self._handle_subscribe_command(chat_id)
        elif command == "unsubscribe":
            return self._handle_unsubscribe_command(chat_id)
        elif command == "settings":
            return self._handle_settings_command(chat_id)
        elif command == "digest":
            return self._handle_digest_command(chat_id)
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    def _handle_start_command(self, chat_id: str) -> str:
        """Handle /start command"""
        return (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Competitor Insight Hub!\n\n"
            f"–í–∞—à Chat ID: `{chat_id}`\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, "
            "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    def _handle_help_command(self) -> str:
        """Handle /help command"""
        return (
            "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å Chat ID\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç—ã\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤\n"
            "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )
    
    def _handle_subscribe_command(self, chat_id: str) -> str:
        """Handle /subscribe command"""
        return (
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç—ã!\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.\n"
            f"–í–∞—à Chat ID: `{chat_id}`"
        )
    
    def _handle_unsubscribe_command(self, chat_id: str) -> str:
        """Handle /unsubscribe command"""
        return (
            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        )
    
    def _handle_settings_command(self, chat_id: str) -> str:
        """Handle /settings command"""
        return (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            f"Chat ID: `{chat_id}`\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )
    
    def _handle_digest_command(self, chat_id: str) -> str:
        """Handle /digest command"""
        return (
            "üì∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞...\n\n"
            "–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )


# Global instance
telegram_service = TelegramService()

